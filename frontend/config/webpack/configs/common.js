const path = require('path');

const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const GitRevisionPlugin = require('git-revision-webpack-plugin');
const gitRevisionPlugin = new GitRevisionPlugin();

const BUILD_DISPLAY_NAME = process.env.BUILD_DISPLAY_NAME;
const BUILD_NUMBER = BUILD_DISPLAY_NAME ?
    BUILD_DISPLAY_NAME.split('-')[0] :
    null;

const autoprefixer = require('autoprefixer');

const {importer, getLocalIdent, isCssClassFromLibrary} = require('../webpack.utils');
const {isProduction, MODES, entries, paths} = require('../../constants');

createCircularDependenciesPluginInstance = () => {
    const isTableOutput = false;
    const contextLimit = null; // 'src\\components';

    let initialResult = new Map();
    const isInitialResultEmpty = () => initialResult.size === 0;
    let prevResult = new Map();
    let result = new Map();

    const mapToArray = (map) => [...map.keys()].map(el => map.get(el))

    addDependency = (dependency) => {
        if (contextLimit == null || dependency.context.indexOf(contextLimit) !== -1) {
            result.set(dependency.circle, dependency);
        }
    };

    out = (value, label) => {
        console.log(label)
        if (isTableOutput) {
            console.table(value);
        } else {
            console.dir(value, {'maxArrayLength': null});
        }
    }

    const defineChanges = (base, newValue, label) => {
        const newCircularDependencies = mapToArray(newValue).filter(el => !base.has(el.circle));
        console.log(`---delta---${label}`)
        out(newCircularDependencies, `new circular dependencies total count = ${newCircularDependencies.length}; Total: ${newValue.size}`);

        const goneCircularDependencies = mapToArray(base).filter(el => !newValue.has(el.circle));
        out(goneCircularDependencies, `gone circular dependencies total count = ${goneCircularDependencies.length}; Total: ${newValue.size}`);
    }

    const handleDetectionEnd = () => {
        if (isInitialResultEmpty()) {
            initialResult = new Map(result);
            const initialResultArray = mapToArray(initialResult);
            out(initialResultArray, `circular dependencies total count = ${initialResultArray.length}`);
        } else {
            defineChanges(initialResult, result, 'Relative to initial build');
        }
        prevResult = new Map(result);
        result.clear();
    };

    return new CircularDependencyPlugin({
        // `onStart` is called before the cycle detection starts
        onStart({compilation}) {
            console.log('start detecting webpack modules cycles');
        },
        // `onDetected` is called for each module that is cyclical
        onDetected({module, paths, compilation}) {
            // `paths` will be an Array of the relative module paths that make up the cycle
            // `module` will be the module record generated by webpack that caused the cycle
            const {context, rawRequest} = module;
            const circle = `\n${paths.join(' -> \n')}`;

            addDependency({
                context: context.slice(context.indexOf('src')),
                rawRequest,
                circle,
            })

            if (isInitialResultEmpty()) {
                compilation.warnings.push(new Error(`Circular dependenci: ${circle}`));
            } else {
                if (!initialResult.has(circle)) {
                    compilation.warnings.push(new Error(`New circular dependenci: ${circle}`));
                }
            }
        },
        // `onEnd` is called before the cycle detection ends
        onEnd({compilation}) {
            handleDetectionEnd();
            console.log('end detecting webpack modules cycles');
        },
    })
};

module.exports = {
    devtool: 'source-map',
    entry: {
        app: entries,
    },
    mode: isProduction ? MODES.PROD : MODES.DEV,
    module: {
        rules: [
            {
                test: /\.(ts|tsx)$/,
                loader: 'ts-loader',
                exclude: /\.test.(ts|tsx)$/
            },
            {
                test: /\.js$/,
                loader: 'babel-loader',
                query: {
                    compact: true
                },
            },
            {
                test: /\.css$/,
                use: [
                    isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
                    'css-loader',
                    'postcss-loader'
                ],
            },
            {
                test: /vendor\.scss$/,
                use: [
                    isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
                    'css-loader',
                    'postcss-loader',
                    'resolve-url-loader',
                    {
                        loader: 'sass-loader',
                        options: {
                            webpackImporter: false,
                            sassOptions: {importer}
                        },
                    }
                ]
            },
            {
                test: /(?<!vendor)\.scss$/,
                use: [
                    isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 3,
                            modules: {
                                mode: 'local',
                                localIdentName: '[local]-[hash:base64:3]',
                                getLocalIdent: (context, localIdentName, localName, options) => {
                                    // library css classes must be written in ../../constants.js libCssClasses
                                    return isCssClassFromLibrary(localName)
                                        ? localName
                                        : getLocalIdent(context, localIdentName, localName, options)
                                },
                            },
                        }
                    },
                    'postcss-loader',
                    'resolve-url-loader',
                    {
                        loader: 'sass-loader',
                        options: {
                            webpackImporter: false,
                            sassOptions: {importer}
                        },
                    }
                ]
            },
            {
                test: /\.(gif|png|jpg|eot|ttf|svg|woff|woff2|pdf)$/,
                include: [paths.src, path.resolve(paths.root, 'node_modules')],
                use: [{
                    loader: 'url-loader',
                    options: {
                        limit: 1000,
                        name: 'assets/[name].[hash:8].[ext]',
                        publicPath: '/'
                    }
                }]
            },
            {
                test: /\.path$/i,
                use: [{loader: 'raw-loader'}]
            }
        ]
    },
    optimization: {
        minimize: isProduction,
        splitChunks: {
            cacheGroups: {
                commons: {
                    test: /[\\/]node_modules[\\/]/,
                    name: 'vendors',
                    chunks: 'all'
                }
            }
        }
    },
    output: {
        path: paths.dist,
        filename: '[name].[hash].js'
    },
    plugins: [
        new HtmlWebpackPlugin({
            favicon: path.resolve(paths.assets, 'favicon.ico'),
            inject: false,
            template: path.resolve(paths.assets, 'index.html'),
            minify: isProduction ? {removeComments: true, collapseWhitespace: true} : false,
            version: JSON.stringify(BUILD_NUMBER || `${gitRevisionPlugin.version()}-ptv`)
        }),
        new MiniCssExtractPlugin({
            filename: '[name].[hash].css'
        }),
        new webpack.LoaderOptionsPlugin({
            options: {
                postcss: [
                    autoprefixer()
                ]
            }
        }),
        ... (process.env.NODE_ENV === 'development' ? [createCircularDependenciesPluginInstance()] : []),
    ],
    resolve: {
        extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
        modules: ['src', 'node_modules'],
        alias: {
            '@app': paths.src,
            '@modules': path.resolve(paths.src, 'modules'),
            '@ui-kit': path.resolve(paths.src, 'components'),
            '@utils': path.resolve(paths.src, 'utils'),
            '@hooks': path.resolve(paths.src, 'hooks'),
            '@constants': path.resolve(paths.src, 'constants'),
        },
    }
};
